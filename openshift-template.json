{
  "kind": "Template",
  "apiVersion": "v1",
  "metadata": {
    "name": "micro-example",
    "annotations": {
      "openshift.io/display-name": "Micro Example",
      "description": "Example Node.js Hello World using Micro.js",
      "tags": "quickstart,nodejs",
      "iconClass": "icon-nodejs"
    }
  },
  "message": "Micro Example deployed",
  "labels": {
    "template": "micro-example"
  },
  "objects": [
    {
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}",
        "annotations": {
          "description": "Exposes and load balances the application pods"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "web",
            "port": 8080,
            "targetPort": 8080
          }
        ],
        "selector": {
          "name": "${NAME}"
        }
      }
    },
    {
      "kind": "Route",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}",
        "annotations": {
          "template.openshift.io/expose-uri": "http://{.spec.host}{.spec.path}"
        }
      },
      "spec": {
        "host": "${APPLICATION_DOMAIN}",
        "to": {
          "kind": "Service",
          "name": "${NAME}"
        }
      }
    },
    {
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}",
        "annotations": {
          "description": "Keeps track of changes in the application image"
        }
      }
    },
    {
      "kind": "BuildConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}",
        "annotations": {
          "description": "Defines how to build the application",
          "template.alpha.openshift.io/wait-for-ready": "true"
        }
      },
      "spec": {
        "source": {
          "type": "Git",
          "git": {
            "uri": "${SOURCE_REPOSITORY_URL}"
          }
        },
        "strategy": {
          "type": "Docker"
        },
        "output": {
          "to": {
            "kind": "ImageStreamTag",
            "name": "${NAME}:latest"
          }
        },
        "triggers": [
          {
            "type": "ImageChange"
          },
          {
            "type": "ConfigChange"
          },
          {
            "type": "GitHub",
            "github": {
              "secret": "${GITHUB_WEBHOOK_SECRET}"
            }
          },
          {
            "type": "Generic",
            "generic": {
              "secret": "${GENERIC_WEBHOOK_SECRET}"
            }
          }
        ],
        "postCommit": {
          "script": "npm test"
        }
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}",
        "annotations": {
          "description": "Defines how to deploy the application server",
          "template.alpha.openshift.io/wait-for-ready": "true"
        }
      },
      "spec": {
        "strategy": {
          "type": "Rolling"
        },
        "triggers": [
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": ["micro-example"],
              "from": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            }
          },
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "name": "${NAME}"
        },
        "template": {
          "metadata": {
            "name": "${NAME}",
            "labels": {
              "name": "${NAME}"
            }
          },
          "spec": {
            "containers": [
              {
                "name": "micro-example",
                "image": " ",
                "ports": [
                  {
                    "containerPort": 8080
                  }
                ],
                "env": [
                  {
                    "name": "DATABASE_SERVICE_NAME",
                    "value": "${DATABASE_SERVICE_NAME}"
                  }
                ],
                "readinessProbe": {
                  "timeoutSeconds": 3,
                  "initialDelaySeconds": 3,
                  "httpGet": {
                    "path": "/",
                    "port": 8080
                  }
                },
                "livenessProbe": {
                  "timeoutSeconds": 3,
                  "initialDelaySeconds": 30,
                  "httpGet": {
                    "path": "/",
                    "port": 8080
                  }
                },
                "resources": {
                  "limits": {
                    "memory": "${MEMORY_LIMIT}"
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "kind": "ServiceAccount",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}"
      }
    },
    {
      "kind": "PersistentVolumeClaim",
      "apiVersion": "v1",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}"
      },
      "spec": {
        "accessModes": ["ReadWriteOnce"],
        "resources": {
          "requests": {
            "storage": "${VOLUME_CAPACITY}"
          }
        }
      }
    },
    {
      "kind": "Service",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}",
        "labels": {
          "component": "${DATABASE_SERVICE_NAME}"
        }
      },
      "spec": {
        "type": "LoadBalancer",
        "selector": {
          "name": "${DATABASE_SERVICE_NAME}",
          "component": "${DATABASE_SERVICE_NAME}"
        },
        "ports": [
          {
            "name": "http",
            "port": 9200,
            "protocol": "TCP"
          },
          {
            "name": "transport",
            "port": 9300,
            "protocol": "TCP"
          }
        ]
      }
    },
    {
      "kind": "ReplicationController",
      "metadata": {
        "name": "es",
        "labels": {
          "component": "elasticsearch"
        }
      },
      "spec": {
        "replicas": 1,
        "template": {
          "metadata": {
            "labels": {
              "component": "${DATABASE_SERVICE_NAME}"
            }
          },
          "spec": {
            "serviceAccount": "${DATABASE_SERVICE_NAME}",
            "containers": [
              {
                "name": "es",
                "image":
                  "quay.io/pires/docker-elasticsearch-kubernetes:1.7.1-4",
                "env": [
                  {
                    "name": "KUBERNETES_CA_CERTIFICATE_FILE",
                    "value":
                      "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                  },
                  {
                    "name": "NAMESPACE",
                    "valueFrom": {
                      "fieldRef": {
                        "fieldPath": "metadata.namespace"
                      }
                    }
                  },
                  {
                    "name": "CLUSTER_NAME",
                    "value": "myesdb"
                  },
                  {
                    "name": "DISCOVERY_SERVICE",
                    "value": "elasticsearch"
                  },
                  {
                    "name": "NODE_MASTER",
                    "value": "true"
                  },
                  {
                    "name": "NODE_DATA",
                    "value": "true"
                  },
                  {
                    "name": "HTTP_ENABLE",
                    "value": "true"
                  }
                ],
                "ports": [
                  {
                    "containerPort": 9200,
                    "name": "http",
                    "protocol": "TCP"
                  },
                  {
                    "containerPort": 9300,
                    "name": "transport",
                    "protocol": "TCP"
                  }
                ],
                "volumeMounts": [
                  {
                    "mountPath": "/data",
                    "name": "${DATABASE_SERVICE_NAME}-data"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "${DATABASE_SERVICE_NAME}-data",
                "emptyDir": {},
                "persistentVolumeClaim": {
                  "claimName": "${DATABASE_SERVICE_NAME}"
                }
              }
            ]
          }
        }
      }
    }
  ],
  "parameters": [
    {
      "name": "NAME",
      "displayName": "Name",
      "description":
        "The name assigned to all of the frontend objects defined in this template.",
      "required": true,
      "value": "micro-example"
    },
    {
      "name": "NAMESPACE",
      "displayName": "Namespace",
      "description": "The OpenShift Namespace where the ImageStream resides.",
      "required": true,
      "value": "openshift"
    },
    {
      "name": "MEMORY_LIMIT",
      "displayName": "Memory Limit",
      "description": "Maximum amount of memory the Node.js container can use.",
      "required": true,
      "value": "512Mi"
    },
    {
      "name": "VOLUME_CAPACITY",
      "displayName": "Volume Capacity",
      "description": "Volume space available for data, e.g. 512Mi, 2Gi",
      "value": "512Mi",
      "required": true
    },
    {
      "name": "SOURCE_REPOSITORY_URL",
      "displayName": "Git Repository URL",
      "description":
        "The URL of the repository with your application source code.",
      "required": true,
      "value": "https://github.com/robbiemccorkell/micro-example.git"
    },
    {
      "name": "APPLICATION_DOMAIN",
      "displayName": "Application Hostname",
      "description":
        "The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.",
      "value": ""
    },
    {
      "name": "GITHUB_WEBHOOK_SECRET",
      "displayName": "GitHub Webhook Secret",
      "description":
        "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{40}"
    },
    {
      "name": "GENERIC_WEBHOOK_SECRET",
      "displayName": "Generic Webhook Secret",
      "description": "A secret string used to configure the Generic webhook.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{40}"
    },
    {
      "name": "DATABASE_SERVICE_NAME",
      "displayName": "Database Service Name",
      "required": true,
      "value": "micro-example-db"
    },
    {
      "name": "DATABASE_SERVICE_NAME",
      "displayName": "Database Service Name",
      "required": true,
      "value": "elasticsearch"
    },
    {
      "name": "MEMORY_ELASTICSEARCH_LIMIT",
      "displayName": "Memory Limit (MongoDB)",
      "description":
        "Maximum amount of memory the ElasticSearch container can use.",
      "required": true,
      "value": "512Mi"
    }
  ]
}
